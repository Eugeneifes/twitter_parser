__author__ = 'Eugene'
# -*- coding: utf-8 -*-

import csv
import hashlib
import os.path
import time
import json
from tweepy.streaming import StreamListener
from tweepy import OAuthHandler
from tweepy import Stream
import urllib
from text_to_vec import transform


consumer_key = ""
consumer_secret = ""
access_token = ""
access_token_secret = ""
maxTweets = 100


def get_last_state():
    hash_set = []
    with open("data_set.csv", "r") as csvfile:
        reader = csv.DictReader(csvfile)
        for line in reader:
            hash_set.append(line["hash"])
    return hash_set


def date_converter(date):
    d = time.strptime(date, '%a %b %d %H:%M:%S +0000 %Y')
    d = time.strftime('%Y-%m-%d %H:%M:%S', d)
    return d


def presetting():
    #Check database existance
    if os.path.isfile("data_set.csv"):
        hash_set = get_last_state()
        tweetCount = len(hash_set)
        print("%d tweets in database" % tweetCount)

    else:
        print("no database")
        print("creating database")
        hash_set = []
        with open("data_set.csv", "w") as csvfile:
            fieldnames = ["id", "date", "text", "hash", "polarity"]
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            tweetCount = 0

    return (tweetCount, hash_set)


def put_to_db(tweet, hash_set, tweetCount):
    with open("data_set.csv", "a") as csvfile:
            fieldnames = ["id", "date", "text", "hash", "polarity"]
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            tweet = json.loads(tweet)
            text = tweet["text"].split()
            if text[0]=='RT' and "@" in text[1]:
                del text[:2]
                final_text = " ".join(text)
            else:
                final_text = " ".join(text)
            hash = hashlib.md5(final_text.encode("utf-8")).hexdigest()

            if hash in hash_set:
                print("already in database")
                pass

            else:
                hash_set.append(hash)
                data = {}
                data["id"] = tweet["id"]
                data["text"] = tweet["text"]
                data["hash"] = hash
                data["date"] = date_converter(tweet["created_at"])
                positive = 0
                negative = 0

                text = transform(data["text"])
                for word in text:
                    if word in positive_words:
                        positive += 1
                    elif word in negative_words:
                        negative += 1

                if positive == 0 and negative == 0 or positive == negative:
                    data["polarity"] = "neutral"
                elif positive > negative:
                    data["polarity"] = "positive"
                else:
                    data["polarity"] = "negative"


                if data["polarity"] in ["positive", "negative"]:
                    try:
                        writer.writerow(data)
                        tweetCount += 1
                    except:
                        print("undecodable")
                        pass
    return (tweetCount)


def process_tweets(tweet):
    tweetCount, hash_set = presetting()

    #while not enough tweets in database
    if tweetCount < maxTweets:
        put_to_db(tweet, hash_set, tweetCount)
    else:
        print("Enough tweets in database")
        exit()


class StdOutListener(StreamListener):

    def on_data(self, data):
        process_tweets(data)

    def on_error(self, status):
        print status

auth = OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)
l = StdOutListener()
stream = Stream(auth, l)


pos_url='http://www.unc.edu/~ncaren/haphazard/positive.txt'
neg_url='http://www.unc.edu/~ncaren/haphazard/negative.txt'

urllib.urlretrieve(pos_url, 'positive.txt')
urllib.urlretrieve(neg_url, 'negative.txt')

pos_sent = open("positive.txt").read()
positive_words = pos_sent.split('\n')
neg_sent = open("negative.txt").read()
negative_words = neg_sent.split('\n')


successful = True
while successful == True:
    try:
        stream.filter(track=["weather"], async=True)
    except:
        print("Some problem")
        pass
